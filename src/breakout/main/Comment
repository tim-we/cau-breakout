Breakout von Tim Weissenfels und Henrik Valett

Objekt-orientierte Zerlegung:

Angefangen haben wir mit unserer Physiksimulation, da diese die Grundlage
für unser Spiel darstellen sollte und wir damit sämtliche Berechnungen 
abhandeln wollten. Da wir uns dann bereits entschieden hatten Breakout 
für das Hochhaus zu programmieren, schrieben wir uns eine Hilfsklasse 
PixelImage welche viele Aufgaben bezüglich der Hochhaus-Darstellung 
übernimmt. Nachdem wir dann die ersten Strukturen, des Models, der View
und des Controllers geschrieben hatten haben wir angefangen die 
grundlegenden Spielkomponenten umzusetzen, dazu gehörten Ball, Paddle 
und Bricks. Nachdem wir die erste funktionierende Version hatten haben 
wir diese immer erweitert und verbessert, so kamen dann bald bessere 
Darstellungen für die Level hinzu, weitere Bricks, neue Mechaniken um 
mit dem Paddle den Ball anzuschneiden, Animationen bei verschiedenen 
Ereignissen und auch weitere Eingabemethoden. 
Damit man zusammengehörende Inhalte möglichst schnell wiederfinden kann
und um den Überblick über unser Programm zu behalten haben wir 
verschiedene Packages erstellt in welche sich unser Programm gliedert
(siehe Übersicht unten). In diesen haben wir dann alle zugehörigen
Interfaces, Klassen und Methoden umgesetzt. Oftmals erben unsere Klassen
von anderen Klassen aus dem Package oder aus einem anderen Package. Ein
gutes Beispiel hierfür ist die Klasse Ball, diese erbt von MovingObject,
welche im Physics-Package enthalten ist, welche von der Klasse
PhysicsObject, auch aus dem Physics-Package erbt. So enthält PhysicsObject
zunächst nur eine Position und einen Aufpunkt der BoundingBox, dies 
erweitert MovingObject um einen Geschwindigkeitsvektor und dies wird 
wiederrum vom Ball um mehrere Eigenschaften erweitert. In jeder dieser 
Klassen haben wir die entsprechenden Methoden umgesetzt. Die 
Instanzvariablen haben wir immer wenn es uns möglich war auf private 
gesetzt und zum ändern bzw. abrufen entsprechend Setter und Getter 
hinzugefügt. Unsere Methoden sind dafür weitesgehend public da diese 
oftmals in anderen Klassen aufgerufen werden.
Genauere Erklärungen diesbezüglich stehen oft an den entsprechenden 
Stellen im Code.


Umsetzung von MVC:

Unserem Programm zugrunde liegt das MVC-Pattern, welches unser Programm 
in ein Model, eine View und einen Controller gliedert. Unser Model enthält 
alle Daten über den aktuellen Spielstand. Daher gehören unsere Klassen wie 
z.B. Ball zum Model. Der Controller übernimmt die Aktualisierung des Models, 
er reagiert auf den UserInput und verändert entsprechend das Model. Die 
View stellt das aktuelle Model dar und wird entsprechend aktualisiert 
sobald sich das Model verändert hat. Dazu verwenden wir wie im Beispiel-Projekt
 die Observable Klasse und Interface. Das Model wird vom Controller mit 
 einer festgelegten Rate (25/Sekunde)  regelmäßig aktualisiert. Wir haben 
 neben unserer ACMView (eine Darstellung auf dem PC) auch noch die LhView 
 fürs Hochhaus, welche auf dem gleichen Model beruht.


Sichtbarkeit und Verwendung von Instanzvariablen und lokalen Variablen:

Da wir unsere Methoden größtenteils auch in anderen Klassen benötigen sind 
diese meistens public. Zur Übersichtlichkeit haben wir uns eine globale 
Konfigurationsklasse breakout.main.Config angelegt welche ausschließlich 
aus Konstanten besteht (public static final). Unsere Instanzvariablen haben 
wir wenn möglich auf private gesetzt und entsprechend Getter und Setter 
hinzugefügt um auf diese zuzugreifen. In unseren Methoden deklarieren wir 
uns oft lokale Variablen, welchen wir Berechnungen oder lange Ausdrücke 
zuweisen um den Code übersichtlicher zu gestalten.

 
Übersicht:
In der folgenden Übersicht finden Sie eine kurze Beschreibung des jeweiligen 
packages und ob es zum Model, zur View oder zum Controller gehört.

Breakout.animations – enthaelt alle Klassen welche für die Animationen 
auf dem Hochhaus zuständig sind. Gehört zum Model.

Breakout.assets – Enthält den Enum zum Blending, die Konstanten und 
die PixelImage Klasse. Gehört zum Model.

breakout.font – enthaelt alle Klassen die für die Schriftzuege auf dem 
Hochhaus zuständig sind. Gehoert zur View, da damit Schrift auf dem 
Hochhaus angezeigt wird.

breakout.input – enthaelt alle Klassen die für UserInput zuständig sind 
und den Bot. Gehoert zum Controller

breakout.items – Enthält die wichtigsten Spielelemente, Ball, Bricks, 
Paddle und die BarOfDeath. Gehoert zum Model.

breakout.levels – enthält die Levelklasse und den Levelloader. 
Gehört zum Controller.

breakout.lighthouse – Enthält die LhNetwork Klasse der Uni und den LhSimulator 
welcher zur View gehört, da dieser eine Modeldarstellung des Hochhauses enthält

breakout.main – Enthält das Model, Views und Controller

breakout.physics – enthält die zur Physiksimulation (in unserem Fall die 
Ballkollision) notwendigen Klassen. Gehoert zum Controller.


